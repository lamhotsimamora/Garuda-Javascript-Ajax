/*
Copyright (c) 2017, Garuda Query Javascript Special AJAX
Author  : Lamhot Simamora. 
Source  : https://raw.githubusercontent.com/lamhotsimamora/GF-Javascript/master/JS/GF-1.js
License : https://raw.githubusercontent.com/lamhotsimamora/GF-Javascript/master/LICENSE
*/
var run_console = false;
let  _un_ = ' is undefined', __nf__ = ' is not found', __nt__ = ' is nothing'; _error_message = { id: "Id of element " + _un_, id_img: "id of image " + _un_, attr: "Attribute " + _un_, name: "Name of element " + _un_, url: "Url " + _un_, url_n: "Url is not valid", clbck_id: "Create callback function or id of element", val: "Value of element " + _un_, val_n: "Value " + __nf__, cnvs: "Id Canvas " + _un_, val_n: "Value " + __nf__, class: "Class of element " + _un_, obj: "Element " + __nf__, fu: "The parameter should be a callback function ", fu_n: "Function call back " + _un_, content: "Content " + _un_, key_cook: "Key of cookie " + __nt__, ajax_start: "Start Load data", ajax_finish: "Finish Load Data", ajax_process: "Request has been proccess", ajax_header: "Request is denied ! Header of request is not come from original server !", ajax_obj: "Element is not initialized", key_s: "Key of storage " + _un_, key_v: "Value of storage " + _un_, str_n: "Sorry your browser is not supported !" }; var _ajaxSetup = { header: 'Content-Type', app: 'application/x-www-form-urlencoded', text_plain: 'text/plain;charset=UTF-8' }; function _getById(o, fu) { try { if (o === undefined) { if (run_console) { _writeLog("_getById -> " + _error_message.id); } return; } if (document.getElementById("" + o + "")) { const obj = document.getElementById("" + o + ""); if (fu === undefined) { return obj; } else { if (_isFunction(fu)) { fu(obj); } } } else { if (run_console) { _writeLog("_getById -> " + _error_message.obj); } return false; } } catch (e) { if (run_console) { _writeLog("_getById -> " + e); } } } function _printTo(o, c) { try { if (o === undefined) { if (run_console) { _writeLog("_printTo -> " + _error_message.id); } return; } if (c === undefined) { if (run_console) { _writeLog("_printTo-> " + _error_message.content); } return; } var obj = _getById(o); if (obj) { obj.innerHTML = c; return obj; } else { if (run_console) { _writeLog("_printTo -> " + _error_message.obj); } return false; } } catch (e) { if (run_console) { _writeLog("_printTo -> " + e); } } } function _clear(o, t) { try { if (o === undefined) { if (run_console) { _writeLog("_clear -> " + _error_message.id); } return; } if (_getById(o)) { if (t === undefined) { _setValue(o, ""); } else { _getById(o).innerHTML = ""; } } else { if (run_console) { _writeLog("_clear -> " + _error_message.obj); } return false; } } catch (e) { if (run_console) { _writeLog("_clear -> " + e); } } } function _focus(o) { try { if (o === undefined) { if (run_console) { _writeLog("_focus->" + _error_message.id); } return; } if (_getById(o)) { _getById(o).focus(); } else { if (run_console) { _writeLog("_focus -> " + _error_message.obj); } } } catch (e) { if (run_console) { _writeLog("_focus -> " + e); } } } function _isUrl(s) { try { if (s === 'undefined') { if (run_console) { _writeLog("_isUrl-> " + _error_message.url); return; } } var regexp = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/; return regexp.test(s); } catch (e) { if (run_console) { _writeLog(e); return; } } } function _getValById(o) { try { if (o === undefined) { if (run_console) { _writeLog("_getValById->" + _error_message.id); } return; } if (_isArray(o)) { var pp = 0, arr = new Array(o.length); while (pp <= o.length - 1) { arr[pp] = (_getById(o[pp]).value) ? _getById(o[pp]).value.trim() : ''; pp++; } return arr; } else { if (_getById(o)) { return (_getById(o).value === '') ? _getById(o).value : _getById(o).value.trim(); } else { if (run_console) { _writeLog("_getValById->" + _error_message.obj); } } } } catch (e) { if (run_console) { _writeLog("_getValById->" + e); } } } function _isFunction(f) { var t = {}; return f && t.toString.call(f) === '[object Function]'; } function _writeLog(v, t) { var _bg_ = 'background: #ffffff; color: '; var r = "#e74c3c", g = "#2ecc71"; if (t === undefined) { console.log("%c " + v + "", _bg_ + r); } else if (t === false) { console.log("%c " + v + "", _bg_ + g); } else { console.log("%c " + v + "", _bg_ + t); } } function _loadDoc(u, fu, h, hV) { try { const __ldc = "_loadDoc"; if (u === undefined) { if (run_console) { _writeLog(__ldc + " -> " + _error_message.url); } return; } if (fu === undefined) { if (run_console) { _writeLog(__ldc + " -> " + _error_message.clbck_id); } return; } if (window.XMLHttpRequest) { x = new XMLHttpRequest(); } else { x = new ActiveXObject("Microsoft.XMLHTTP"); } x.onreadystatechange = function() { if (this.readyState == 0) { if (run_console) { _writeLog(__ldc + " -> " + _error_message.ajax_obj); } return false; } if (this.readyState == 1) { if (run_console) { _writeLog(__ldc + " -> " + _error_message.ajax_start); } } if (this.readyState == 2) { if (run_console) { _writeLog(__ldc + " -> " + _error_message.ajax_finish); } } if (this.status == 202) { if (run_console) { _writeLog(__ldc + " -> " + _error_message.ajax_process); } } if (this.status == 203) { if (run_console) { _writeLog(__ldc + " -> " + _error_message.ajax_header); } return false; } if (this.status == 400 || this.status == 404) { if (_isFunction(fu)) { fu(this.status); } return false; } else if (this.readyState == 4 && this.status == 200) { if (_isFunction(fu)) { fu(this.responseText, this.status, this.readyState); if (run_console) { _writeLog("_loadDoc -> Run Function Call Back " + fu, false); } } else { _printTo(fu, this.responseText); if (run_console) { _writeLog("_loadDoc -> Success load document", false); } } } }; x.open("GET", u, true); h = (h === undefined) ? _ajaxSetup.header : h; hV = (hV === undefined) ? _ajaxSetup.app : hV; x.setRequestHeader(h, hV); x.send(); } catch (e) { if (run_console) { _writeLog(__ldc + " -> " + e); } } } function _requestPOST(u, p, fu, h, hV) {try {const __rps = "_requestPOST"; if (u === undefined) {if (run_console) { _writeLog(__rps + " -> " + _error_message.url); } return; } if (p === undefined) {if (run_console) { _writeLog(__rps + " -> Parameter POST " + __nf__); } return; } if (fu === undefined) {if (run_console) { _writeLog(__rps + " -> " + _error_message.clbck_id); } return; } if (window.XMLHttpRequest) { x = new XMLHttpRequest(); } else { x = new ActiveXObject("Microsoft.XMLHTTP"); } x.onreadystatechange = function() {if (this.readyState == 0) { if (run_console) { _writeLog(__rps + " -> " + _error_message.ajax_obj); } return false; } if (this.readyState == 1) { if (run_console) { _writeLog(__rps + " -> " + _error_message.ajax_start); } } if (this.readyState == 2) {if (run_console) { _writeLog(__rps + " -> " + _error_message.ajax_finish); } } if (this.status == 202) { if (run_console) { _writeLog(__rps + " -> " + _error_message.ajax_process); } } if (this.status == 203) {if (run_console) { _writeLog(__rps + " -> " + _error_message.ajax_header); } return false; } if (this.status == 400 || this.status == 404) {if (_isFunction(fu)) { fu(this.status); } return false; } else if (this.readyState == 4 && this.status == 200) {if (_isFunction(fu)) {fu(this.responseText, this.status, this.readyState); if (run_console) { _writeLog(__rps + " -> Run Function Call Back " + fu, false); } } else { _printTo(fu, this.responseText); if (run_console) { _writeLog(__rps + " -> Print Success", false); } } } }; x.open("POST", u, true); h = (h === undefined) ? _ajaxSetup.header : h; hV = (hV === undefined) ? _ajaxSetup.app : hV; x.setRequestHeader(h, hV); x.send("" + p + ""); } catch (e) { if (run_console) { _writeLog(__rps + " -> " + e); } } } function _requestGET(u, fu, h, hV) { try { const __rg = "_requestGET"; if (u === undefined) { if (run_console) { _writeLog(__rg + " -> " + _error_message.url); } return; } if (fu === undefined) { if (run_console) { _writeLog(__rg + " ->" + _error_message.clbck_id); } return; } if (window.XMLHttpRequest) { x = new XMLHttpRequest(); } else { x = new ActiveXObject("Microsoft.XMLHTTP"); } x.onreadystatechange = function() { if (this.readyState == 0) { if (run_console) { _writeLog(__rg + " -> " + _error_message.ajax_obj); } return false; } if (this.readyState == 1) { if (run_console) { _writeLog(__rg + " -> " + _error_message.ajax_start); } } if (this.readyState == 2) { if (run_console) { _writeLog(__rg + " -> " + _error_message.ajax_finish); } } if (this.status == 202) { if (run_console) { _writeLog(__rg + " -> " + _error_message.ajax_process); } } if (this.status == 203) { if (run_console) { _writeLog(__rg + " -> " + _error_message.ajax_header); } return false; } if (this.status == 400 || this.status == 404) { if (_isFunction(fu)) { fu(this.status); } return false; } else if (this.readyState == 4 && this.status == 200) { if (_isFunction(fu)) { fu(this.responseText, this.status, this.readyState); if (run_console) { _writeLog(__rg + " -> Run Function Call Back " + fu, false); } } else { _printTo(fu, this.responseText); if (run_console) { _writeLog(__rg + " -> Print Success", false); } } } }; x.open("GET", u, true); h = (h === undefined) ? _ajaxSetup.header : h; hV = (hV === undefined) ? _ajaxSetup.app : hV; x.setRequestHeader(h, hV); x.send(); } catch (e) { if (run_console) { _writeLog(__rg + " -> " + e); } } } function _requestPUT(u, fu, h, hV) { try { const ___rp = '_requestPUT'; if (u === undefined) { if (run_console) { _writeLog(___rp + " -> " + _error_message.url); } return; } if (fu === undefined) { if (run_console) { _writeLog(___rp + " -> " + _error_message.clbck_id); } return; } if (window.XMLHttpRequest) { x = new XMLHttpRequest(); } else { x = new ActiveXObject("Microsoft.XMLHTTP"); } x.onreadystatechange = function() { if (this.readyState == 0) { if (run_console) { _writeLog(___rp + " -> " + _error_message.ajax_obj); } return false; } if (this.readyState == 1) { if (run_console) { _writeLog(___rp + " -> " + _error_message.ajax_start); } } if (this.readyState == 2) { if (run_console) { _writeLog(___rp + " -> " + _error_message.ajax_finish); } } if (this.status == 202) { if (run_console) { _writeLog(___rp + " -> " + _error_message.ajax_process); } } if (this.status == 203) { if (run_console) { _writeLog(___rp + " -> " + _error_message.ajax_header); } return false; } if (this.status == 400 || this.status == 404) { if (_isFunction(fu)) { fu(this.status); } return false; } else if (this.readyState == 4 && this.status == 200) { if (_isFunction(fu)) { fu(this.responseText, this.status, this.readyState); if (run_console) { _writeLog(___rp + " -> Run Function Call Back " + fu, false); } } else { _printTo(fu, this.responseText); if (run_console) { _writeLog(___rp + " -> Success load document", false); } } } }; x.open("PUT", u, true); h = (h === undefined) ? _ajaxSetup.header : h; hV = (hV === undefined) ? _ajaxSetup.app : hV; x.setRequestHeader(h, hV); x.send(); } catch (e) { if (run_console) { _writeLog(___rp + " -> " + e); } } }
